<?php


namespace cs\services;

use DateTime;
use cs\models\Response;
use yii\helpers\VarDumper;

class DatePeriod
{
    private static $messageBig  = 'более пяти лет назад';
    private static $messageBig2 = 'более пяти лет';

    /**
     * @return array
     */
    protected static function getPeriods()
    {
        return [
            ['min' => 0, 'max' => 10, 'только что'],
            ['min' => 10, 'max' => 20, '10 секунд назад'],
            ['min' => 20, 'max' => 30, '20 секунд назад'],
            ['min' => 30, 'max' => 40, '30 секунд назад'],
            ['min' => 40, 'max' => 50, '40 секунд назад'],
            ['min' => 50, 'max' => 60, '50 секунд назад'],
            ['min' => 60, 'max' => 60 * 2, '1 минуту назад'],
            ['min' => 60 * 2, 'max' => 60 * 3, '2 минуты назад'],
            ['min' => 60 * 3, 'max' => 60 * 4, '3 минуты назад'],
            ['min' => 60 * 4, 'max' => 60 * 5, '4 минуты назад'],
            ['min' => 60 * 5, 'max' => 60 * 6, '5 минут назад'],
            ['min' => 60 * 6, 'max' => 60 * 7, '6 минут назад'],
            ['min' => 60 * 7, 'max' => 60 * 8, '7 минут назад'],
            ['min' => 60 * 8, 'max' => 60 * 9, '8 минут назад'],
            ['min' => 60 * 9, 'max' => 60 * 10, '9 минут назад'],
            ['min' => 60 * 10, 'max' => 60 * 20, '10 минут назад'],
            ['min' => 60 * 20, 'max' => 60 * 30, '20 минут назад'],
            ['min' => 60 * 30, 'max' => 60 * 60, 'пол часа назад'],
            ['min' => 60 * 60, 'max' => 60 * 60 * 2, '1 час назад'],
            ['min' => 60 * 60 * 2, 'max' => 60 * 60 * 3, '2 часа назад'],
            ['min' => 60 * 60 * 3, 'max' => 60 * 60 * 4, '3 часа назад'],
            ['min' => 60 * 60 * 4, 'max' => 60 * 60 * 5, '4 часа назад'],
            ['min' => 60 * 60 * 5, 'max' => 60 * 60 * 6, '5 часов назад'],
            ['min' => 60 * 60 * 6, 'max' => 60 * 60 * 7, '6 часа назад'],
            ['min' => 60 * 60 * 7, 'max' => 60 * 60 * 8, '7 часов назад'],
            ['min' => 60 * 60 * 8, 'max' => 60 * 60 * 9, '8 часов назад'],
            ['min' => 60 * 60 * 9, 'max' => 60 * 60 * 10, '9 часов назад'],
            ['min' => 60 * 60 * 10, 'max' => 60 * 60 * 11, '10 часов назад'],
            ['min' => 60 * 60 * 11, 'max' => 60 * 60 * 12, '11 часов назад'],
            ['min' => 60 * 60 * 12, 'max' => 60 * 60 * 13, '12 часов назад'],
            ['min' => 60 * 60 * 13, 'max' => 60 * 60 * 14, '13 часов назад'],
            ['min' => 60 * 60 * 14, 'max' => 60 * 60 * 15, '14 часов назад'],
            ['min' => 60 * 60 * 15, 'max' => 60 * 60 * 16, '15 часов назад'],
            ['min' => 60 * 60 * 16, 'max' => 60 * 60 * 17, '16 часов назад'],
            ['min' => 60 * 60 * 17, 'max' => 60 * 60 * 18, '17 часов назад'],
            ['min' => 60 * 60 * 18, 'max' => 60 * 60 * 19, '18 часов назад'],
            ['min' => 60 * 60 * 19, 'max' => 60 * 60 * 20, '19 часов назад'],
            ['min' => 60 * 60 * 20, 'max' => 60 * 60 * 21, '20 часов назад'],
            ['min' => 60 * 60 * 21, 'max' => 60 * 60 * 22, '21 час назад'],
            ['min' => 60 * 60 * 22, 'max' => 60 * 60 * 23, '22 часа назад'],
            ['min' => 60 * 60 * 23, 'max' => 60 * 60 * 24, '23 часа назад'],
            ['min' => 60 * 60 * 24, 'max' => 60 * 60 * 24 * 2, '1 день назад'],
            ['min' => 60 * 60 * 24 * 2, 'max' => 60 * 60 * 24 * 3, '2 дня назад'],
            ['min' => 60 * 60 * 24 * 3, 'max' => 60 * 60 * 24 * 4, '3 дня назад'],
            ['min' => 60 * 60 * 24 * 4, 'max' => 60 * 60 * 24 * 5, '4 дня назад'],
            ['min' => 60 * 60 * 24 * 5, 'max' => 60 * 60 * 24 * 6, '5 дней назад'],
            ['min' => 60 * 60 * 24 * 6, 'max' => 60 * 60 * 24 * 7, '6 дней назад'],
            ['min' => 60 * 60 * 24 * 7, 'max' => 60 * 60 * 24 * 7 * 2, '1 неделю назад'],
            ['min' => 60 * 60 * 24 * 7 * 2, 'max' => 60 * 60 * 24 * 7 * 3, '2 недели назад'],
            ['min' => 60 * 60 * 24 * 7 * 3, 'max' => 60 * 60 * 24 * 7 * 4, '3 недели назад'],
            ['min' => 60 * 60 * 24 * 7 * 4, 'max' => 60 * 60 * 24 * 7 * 4 * 2, '1 месяц назад'],
            ['min' => 60 * 60 * 24 * 7 * 4 * 2, 'max' => 60 * 60 * 24 * 30 * 3, '2 месяца назад'],
            ['min' => 60 * 60 * 24 * 30 * 3, 'max' => 60 * 60 * 24 * 30 * 4, '3 месяца назад'],
            ['min' => 60 * 60 * 24 * 30 * 4, 'max' => 60 * 60 * 24 * 30 * 5, '4 месяца назад'],
            ['min' => 60 * 60 * 24 * 30 * 5, 'max' => 60 * 60 * 24 * 30 * 6, '5 месяцев назад'],
            ['min' => 60 * 60 * 24 * 30 * 6, 'max' => 60 * 60 * 24 * 30 * 7, '6 месяца назад'],
            ['min' => 60 * 60 * 24 * 30 * 7, 'max' => 60 * 60 * 24 * 30 * 8, '7 месяцев назад'],
            ['min' => 60 * 60 * 24 * 30 * 8, 'max' => 60 * 60 * 24 * 30 * 9, '8 месяцев назад'],
            ['min' => 60 * 60 * 24 * 30 * 9, 'max' => 60 * 60 * 24 * 30 * 10, '9 месяцев назад'],
            ['min' => 60 * 60 * 24 * 30 * 10, 'max' => 60 * 60 * 24 * 30 * 11, '10 месяцев назад'],
            ['min' => 60 * 60 * 24 * 30 * 11, 'max' => 60 * 60 * 24 * 30 * 12, '11 месяцев назад'],
            ['min' => 60 * 60 * 24 * 30 * 12, 'max' => 60 * 60 * 24 * 30 * 12 * 2, '1 год назад'],
            ['min' => 60 * 60 * 24 * 30 * 12 * 2, 'max' => 60 * 60 * 24 * 30 * 12 * 3, '2 года назад'],
            ['min' => 60 * 60 * 24 * 30 * 12 * 3, 'max' => 60 * 60 * 24 * 30 * 12 * 4, '3 года назад'],
            ['min' => 60 * 60 * 24 * 30 * 12 * 4, 'max' => 60 * 60 * 24 * 30 * 12 * 5, '4 года назад'],
        ];
    }

    /**
     * Сколько еще осталось?
     *
     * @return array
     */
    protected static function getPeriods2()
    {
        return [
            ['min' => 0, 'max' => 60, 'меньше минуты'],
            ['min' => 60, 'max' => 60 * 2, '1 минута'],
            ['min' => 60 * 2, 'max' => 60 * 3, '2 минуты'],
            ['min' => 60 * 3, 'max' => 60 * 4, '3 минуты'],
            ['min' => 60 * 4, 'max' => 60 * 5, '4 минуты'],
            ['min' => 60 * 5, 'max' => 60 * 6, '5 минут'],
            ['min' => 60 * 6, 'max' => 60 * 7, '6 минут'],
            ['min' => 60 * 7, 'max' => 60 * 8, '7 минут'],
            ['min' => 60 * 8, 'max' => 60 * 9, '8 минут'],
            ['min' => 60 * 9, 'max' => 60 * 10, '9 минут'],
            ['min' => 60 * 10, 'max' => 60 * 20, '10 минут'],
            ['min' => 60 * 20, 'max' => 60 * 30, '20 минут'],
            ['min' => 60 * 30, 'max' => 60 * 60, '30 минут'],
            ['min' => 60 * 60, 'max' => 60 * 60 * 2, '1 час'],
            ['min' => 60 * 60 * 2, 'max' => 60 * 60 * 3, '2 часа'],
            ['min' => 60 * 60 * 3, 'max' => 60 * 60 * 4, '3 часа'],
            ['min' => 60 * 60 * 4, 'max' => 60 * 60 * 5, '4 часа'],
            ['min' => 60 * 60 * 5, 'max' => 60 * 60 * 6, '5 часов'],
            ['min' => 60 * 60 * 6, 'max' => 60 * 60 * 7, '6 часа'],
            ['min' => 60 * 60 * 7, 'max' => 60 * 60 * 8, '7 часов'],
            ['min' => 60 * 60 * 8, 'max' => 60 * 60 * 9, '8 часов'],
            ['min' => 60 * 60 * 9, 'max' => 60 * 60 * 10, '9 часов'],
            ['min' => 60 * 60 * 10, 'max' => 60 * 60 * 11, '10 часов'],
            ['min' => 60 * 60 * 11, 'max' => 60 * 60 * 12, '11 часов'],
            ['min' => 60 * 60 * 12, 'max' => 60 * 60 * 13, '12 часов'],
            ['min' => 60 * 60 * 13, 'max' => 60 * 60 * 14, '13 часов'],
            ['min' => 60 * 60 * 14, 'max' => 60 * 60 * 15, '14 часов'],
            ['min' => 60 * 60 * 15, 'max' => 60 * 60 * 16, '15 часов'],
            ['min' => 60 * 60 * 16, 'max' => 60 * 60 * 17, '16 часов'],
            ['min' => 60 * 60 * 17, 'max' => 60 * 60 * 18, '17 часов'],
            ['min' => 60 * 60 * 18, 'max' => 60 * 60 * 19, '18 часов'],
            ['min' => 60 * 60 * 19, 'max' => 60 * 60 * 20, '19 часов'],
            ['min' => 60 * 60 * 20, 'max' => 60 * 60 * 21, '20 часов'],
            ['min' => 60 * 60 * 21, 'max' => 60 * 60 * 22, '21 час'],
            ['min' => 60 * 60 * 22, 'max' => 60 * 60 * 23, '22 часа'],
            ['min' => 60 * 60 * 23, 'max' => 60 * 60 * 24, '23 часа'],
            ['min' => 60 * 60 * 24, 'max' => 60 * 60 * 24 * 2, '1 день'],
            ['min' => 60 * 60 * 24 * 2, 'max' => 60 * 60 * 24 * 3, '2 дня'],
            ['min' => 60 * 60 * 24 * 3, 'max' => 60 * 60 * 24 * 4, '3 дня'],
            ['min' => 60 * 60 * 24 * 4, 'max' => 60 * 60 * 24 * 5, '4 дня'],
            ['min' => 60 * 60 * 24 * 5, 'max' => 60 * 60 * 24 * 6, '5 дней'],
            ['min' => 60 * 60 * 24 * 6, 'max' => 60 * 60 * 24 * 7, '6 дней'],
            ['min' => 60 * 60 * 24 * 7, 'max' => 60 * 60 * 24 * 7 * 2, '1 неделю'],
            ['min' => 60 * 60 * 24 * 7 * 2, 'max' => 60 * 60 * 24 * 7 * 3, '2 недели'],
            ['min' => 60 * 60 * 24 * 7 * 3, 'max' => 60 * 60 * 24 * 7 * 4, '3 недели'],
            ['min' => 60 * 60 * 24 * 7 * 4, 'max' => 60 * 60 * 24 * 7 * 4 * 2, '1 месяц'],
            ['min' => 60 * 60 * 24 * 7 * 4 * 2, 'max' => 60 * 60 * 24 * 30 * 3, '2 месяца'],
            ['min' => 60 * 60 * 24 * 30 * 3, 'max' => 60 * 60 * 24 * 30 * 4, '3 месяца'],
            ['min' => 60 * 60 * 24 * 30 * 4, 'max' => 60 * 60 * 24 * 30 * 5, '4 месяца'],
            ['min' => 60 * 60 * 24 * 30 * 5, 'max' => 60 * 60 * 24 * 30 * 6, '5 месяцев'],
            ['min' => 60 * 60 * 24 * 30 * 6, 'max' => 60 * 60 * 24 * 30 * 7, '6 месяца'],
            ['min' => 60 * 60 * 24 * 30 * 7, 'max' => 60 * 60 * 24 * 30 * 8, '7 месяцев'],
            ['min' => 60 * 60 * 24 * 30 * 8, 'max' => 60 * 60 * 24 * 30 * 9, '8 месяцев'],
            ['min' => 60 * 60 * 24 * 30 * 9, 'max' => 60 * 60 * 24 * 30 * 10, '9 месяцев'],
            ['min' => 60 * 60 * 24 * 30 * 10, 'max' => 60 * 60 * 24 * 30 * 11, '10 месяцев'],
            ['min' => 60 * 60 * 24 * 30 * 11, 'max' => 60 * 60 * 24 * 30 * 12, '11 месяцев'],
            ['min' => 60 * 60 * 24 * 30 * 12, 'max' => 60 * 60 * 24 * 30 * 12 * 2, '1 год'],
            ['min' => 60 * 60 * 24 * 30 * 12 * 2, 'max' => 60 * 60 * 24 * 30 * 12 * 3, '2 года'],
            ['min' => 60 * 60 * 24 * 30 * 12 * 3, 'max' => 60 * 60 * 24 * 30 * 12 * 4, '3 года'],
            ['min' => 60 * 60 * 24 * 30 * 12 * 4, 'max' => 60 * 60 * 24 * 30 * 12 * 5, '4 года'],
        ];
    }

    /**
     * Преобразует переданный промежуток в секкунда в строку
     *
     * @param int $diff время в секундах
     *
     * @return string
     */
    private static function backConvert($diff)
    {
        $periods = self::getPeriods();
        foreach ($periods as $period) {
            if ($period['min'] <= $diff && $period['max'] > $diff) return $period[0];
        }

        return self::$messageBig;
    }

    /**
     *
     * Преобразует переданный промежуток в секкунда в строку
     *
     * @param int $diff время в секундах
     *
     * @return string
     */
    private static function forwardConvert($diff)
    {
        $periods = self::getPeriods2();
        foreach ($periods as $period) {
            if ($period['min'] <= $diff && $period['max'] > $diff) return $period[0];
        }

        return self::$messageBig2;
    }

    /**
     * Возвращает строку отвечающий на вопрос: сколько осталось ждать до $date ?
     *
     * @param string|int|DateTime $date               UTC
     * @param mixed               $messageLessThenNow сообщение возвращаемое когда переданное время меньше настоящего
     *                                                момента
     *
     * @return string
     */
    public static function forward($date, $messageLessThenNow = 'просрочено')
    {
        $ret = self::convertDate($date);
        if (!$ret->status) return $ret->error;
        $value = $ret->data;

        return self::forwardInt($value, $messageLessThenNow);
    }

    /**
     * Возвращает строку отвечающий на вопрос: сколько осталось ждать до $date ?
     *
     * @param int   $date               UTC
     * @param mixed $messageLessThenNow сообщение возвращаемое когда переданное время меньше настоящего момента
     *
     * @return string
     */
    public static function forwardInt($date, $messageLessThenNow = 'просрочено')
    {
        $end = $date;
        $now = gmdate('U');
        if ($end < $now) return $messageLessThenNow;
        $diff = $end - $now;

        return self::forwardConvert($diff);
    }

    /**
     * @param string|int|DateTime $date UTC
     *
     * @return \cs\models\Response
     * integer - unix time
     */
    private static function convertDate($date)
    {
        if (is_string($date)) {
            return Response::success((new \DateTime($date, new \DateTimeZone('UTC')))->format('U'));
        } else if ($date instanceof DateTime) {
            return Response::success($date->format('U'));
        } else if (is_integer($date)) {
            return Response::success($date);
        } else {
            return Response::error('Не верный формат данных');
        }
    }

    /**
     * Возвращает строку отвечающий на вопрос: какой промежуток прошел после $date ?
     *
     * @param string|int|DateTime $date                 UTC
     * @param mixed               $messageGregerThenNow сообщение возвращаемое когда переданное время больше настоящего
     *                                                  момента
     *
     * @return string
     */
    public static function back($date, $messageGregerThenNow = 'больше настоящего')
    {
        $ret = self::convertDate($date);
        if (!$ret->status) return $ret->error;
        $value = $ret->data;

        return self::backInt($value, $messageGregerThenNow);

    }

    /**
     * Возвращает строку отвечающий на вопрос: какой промежуток прошел после $date ?
     *
     * @param int   $date                 UTC
     * @param mixed $messageGregerThenNow сообщение возвращаемое когда переданное время больше настоящего момента
     *
     * @return string
     */
    public static function backInt($date, $messageGregerThenNow = 'больше настоящего')
    {
        $start = $date;
        $now = gmdate('U');
        if ($start > $now) return $messageGregerThenNow;
        $diff = $now - $start;
        return self::backConvert($diff);
    }

    /**
     * Возвращает строку отвечающий на вопрос: какой промежуток прошел после $date ?
     *
     * @param string|int|DateTime $date                 UTC
     * @param mixed               $messageGregerThenNow сообщение возвращаемое когда переданное время больше настоящего
     *                                                  момента
     *
     * @return string
     */
    public static function diff($date)
    {
        if (is_null($date)) return '';
        $ret = self::convertDate($date);
        if (!$ret->status) return $ret->error;
        return self::diffInt($ret->data);
    }

    /**
     * Возвращает строку отвечающий на вопрос: какой промежуток прошел после $date ?
     *
     * @param int   $date                               UTC
     * @param mixed $messageGregerThenNow               сообщение возвращаемое когда переданное время больше настоящего
     *                                                  момента
     *
     * @return string
     */
    public static function diffInt($date)
    {
        $now = gmdate('U');
        if ($now > $date) return self::backInt($date);

        return self::forwardInt($date);
    }
}